/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package megasena;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author SuperAbdala
 */
public class ProcurarArquivo extends javax.swing.JFrame {
    public String linharecebida;
    public String concatenar;
    public String sorteio1, sorteio2, sorteio3, sorteio4, sorteio5, sorteio6;
    public String codigo,conversor;
    public String dia, mes, ano;
    public int contador,recebevalor = 0,contadorvalores = 0;
    public int n1 = 0, n2 = 0, n3 = 0, n4 = 0, n5 = 0, n6 = 0, n7 = 0, n8 = 0, n9 = 0, n10 = 0, n11 = 0, n12 = 0, n13 = 0, n14 = 0, n15 = 0, n16 = 0, n17 = 0, n18 = 0, n19 = 0, n20 = 0;
    public int n21 = 0, n22 = 0, n23 = 0, n24 = 0, n25 = 0, n26 = 0, n27 = 0, n28 = 0, n29 = 0, n30 = 0, n31 = 0, n32 = 0, n33 = 0, n34 = 0, n35 = 0, n36 = 0, n37 = 0, n38 = 0, n39 = 0, n40 = 0;
    public int n41 = 0, n42 = 0, n43 = 0, n44 = 0, n45 = 0, n46 = 0, n47 = 0, n48 = 0, n49 = 0, n50 = 0, n51 = 0, n52 = 0, n53 = 0, n54 = 0, n55 = 0, n56 = 0, n57 = 0, n58 = 0, n59 = 0, n60 = 0;
    public int maiores1,maiores2,maiores3,maiores4,maiores5,maiores6,maiores7,maiores8,maiores9,maiores10,maiores11,maiores12,maiores13,maiores14,maiores15;
    public int maiores16,maiores17,maiores18,maiores19,maiores20,maiores21,maiores22,maiores23,maiores24,maiores25,maiores26,maiores27,maiores28,maiores29,maiores30;
    public int vetor60[] = new int[60];
    
    
    /**
     * Creates new form ProcurarArquivo
     */
    public ProcurarArquivo() {
        initComponents();
        //Colocar a tela no centro
        this.setLocationRelativeTo(null);
        //Impedir que a tela seja maximizada
        this.setResizable(false);
        Vernumeros.setEnabled(false);
        Mostrarccombinacoes.setEnabled(false);
    }

    
    public void separarResultados(){
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Texto1 = new javax.swing.JTextArea();
        Vernumeros = new javax.swing.JButton();
        Mostrarccombinacoes = new javax.swing.JButton();
        VerificarJogo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Lucida Calligraphy", 0, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 0, 102));
        jLabel1.setText("MEGA SENA");

        jButton1.setText("Procurar arquivo de texto");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Lucida Calligraphy", 0, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Procurar Arquivo");

        Texto1.setColumns(20);
        Texto1.setRows(5);
        jScrollPane1.setViewportView(Texto1);

        Vernumeros.setText("Ver números");
        Vernumeros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VernumerosActionPerformed(evt);
            }
        });

        Mostrarccombinacoes.setText("Mostrar combinações");
        Mostrarccombinacoes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MostrarccombinacoesActionPerformed(evt);
            }
        });

        VerificarJogo.setText("Verificar Jogo");
        VerificarJogo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VerificarJogoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Vernumeros)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Mostrarccombinacoes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(VerificarJogo))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(Vernumeros)
                    .addComponent(Mostrarccombinacoes)
                    .addComponent(VerificarJogo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButton1.getAccessibleContext().setAccessibleDescription("Abre caixa de diagolo para procurar arquivo de texto contendo todos os jogos da mega sena. \n");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       try {
        //Filtro para tipo de arquivo
        FileNameExtensionFilter filtername = new FileNameExtensionFilter("txt", "txt");
        //Instanciar o FileChooser
        JFileChooser fc = new JFileChooser();
        //Adicionando o filtro para o arquivo selecionado
        fc.setFileFilter(filtername);
        //Adicionar nome a tela de pesquisa do arquivo
        fc.setDialogTitle("Escolha um arquivo de texto(.txt)");
        //Abrir tela para procurar arquivo e receber resposta por um inteiro
        int resultado = fc.showOpenDialog(null);
            //Verificar resposta
            if (resultado == JFileChooser.APPROVE_OPTION) {
            //Abrir arquivo
            File arquivo = new File(fc.getSelectedFile().getAbsolutePath());
            FileReader fr = new FileReader(arquivo);
            BufferedReader bf = new BufferedReader(fr);
                while (bf.ready()) {
                String linha = bf.readLine();
                linharecebida = linha + "..";
        contador = 1;
        concatenar = "";
        for (int i = 0; i < linharecebida.length() - 1; i++) {
            if (contador == 10) {
                if (Character.isDigit(linharecebida.charAt(i)) == true) {
                    concatenar += linharecebida.charAt(i);
                } else {
                    sorteio6 = concatenar;
                    concatenar = "";
                    contador++;
                }
            }

            if (contador == 9) {
                if (Character.isDigit(linharecebida.charAt(i)) == true) {
                    concatenar += linharecebida.charAt(i);
                } else {
                    sorteio5 = concatenar;
                    concatenar = "";
                    contador++;
                }
            }

            if (contador == 8) {
                if (Character.isDigit(linharecebida.charAt(i)) == true) {
                    concatenar += linharecebida.charAt(i);
                } else {
                    sorteio4 = concatenar;
                    concatenar = "";
                    contador++;
                }
            }

            if (contador == 7) {
                if (Character.isDigit(linharecebida.charAt(i)) == true) {
                    concatenar += linharecebida.charAt(i);
                } else {
                    sorteio3 = concatenar;
                    concatenar = "";
                    contador++;
                }
            }

            if (contador == 6) {
                if (Character.isDigit(linharecebida.charAt(i)) == true) {
                    concatenar += linharecebida.charAt(i);
                } else {
                    sorteio2 = concatenar;
                    concatenar = "";
                    contador++;
                }
            }

            if (contador == 5) {
                if (Character.isDigit(linharecebida.charAt(i)) == true) {
                    concatenar += linharecebida.charAt(i);
                } else {
                    sorteio1 = concatenar;
                    concatenar = "";
                    contador++;
                }
            }

            if (contador == 4) {
                if (Character.isDigit(linharecebida.charAt(i)) == true) {
                    concatenar += linharecebida.charAt(i);
                } else {
                    ano = concatenar;
                    concatenar = "";
                    contador++;
                }
            }

            if (contador == 3) {
                if (Character.isDigit(linharecebida.charAt(i)) == true) {
                    concatenar += linharecebida.charAt(i);
                } else {
                    mes = concatenar;
                    concatenar = "";
                    contador++;
                }
            }

            if (contador == 2) {
                if (Character.isDigit(linharecebida.charAt(i)) == true) {
                    concatenar += linharecebida.charAt(i);
                } else {
                    dia = concatenar;
                    concatenar = "";
                    contador++;
                }
            }

            if (contador == 1) {
                if (Character.isDigit(linharecebida.charAt(i)) == true) {
                    concatenar += linharecebida.charAt(i);
                } else {
                    codigo = concatenar;
                    concatenar = "";
                    contador++;
                }
            }
        }
        
        switch (Integer.parseInt(sorteio1)) {
            case 1:
                n1++;
                break;
            case 2:
                n2++;
                break;

            case 3:
                n3++;
                break;

            case 4:
                n4++;
                break;

            case 5:
                n5++;
                break;

            case 6:
                n6++;
                break;

            case 7:
                n7++;
                break;

            case 8:
                n8++;
                break;

            case 9:
                n9++;
                break;

            case 10:
                n10++;
                break;

            case 11:
                n11++;
                break;

            case 12:
                n12++;
                break;

            case 13:
                n13++;
                break;

            case 14:
                n14++;
                break;

            case 15:
                n15++;
                break;

            case 16:
                n16++;
                break;

            case 17:
                n17++;
                break;

            case 18:
                n18++;
                break;

            case 19:
                n19++;
                break;

            case 20:
                n20++;
                break;

            case 21:
                n21++;
                break;

            case 22:
                n22++;
                break;

            case 23:
                n23++;
                break;

            case 24:
                n24++;
                break;

            case 25:
                n25++;
                break;

            case 26:
                n26++;
                break;

            case 27:
                n27++;
                break;

            case 28:
                n28++;
                break;

            case 29:
                n29++;
                break;

            case 30:
                n30++;
                break;

            case 31:
                n31++;
                break;

            case 32:
                n32++;
                break;

            case 33:
                n33++;
                break;

            case 34:
                n34++;
                break;

            case 35:
                n35++;
                break;

            case 36:
                n36++;
                break;

            case 37:
                n37++;
                break;

            case 38:
                n38++;
                break;

            case 39:
                n39++;
                break;

            case 40:
                n40++;
                break;

            case 41:
                n41++;
                break;

            case 42:
                n42++;
                break;

            case 43:
                n43++;
                break;

            case 44:
                n44++;
                break;

            case 45:
                n45++;
                break;

            case 46:
                n46++;
                break;

            case 47:
                n47++;
                break;

            case 48:
                n48++;
                break;

            case 49:
                n49++;
                break;

            case 50:
                n50++;
                break;

            case 51:
                n51++;
                break;

            case 52:
                n52++;
                break;

            case 53:
                n53++;
                break;

            case 54:
                n54++;
                break;

            case 55:
                n55++;
                break;

            case 56:
                n56++;
                break;

            case 57:
                n57++;
                break;

            case 58:
                n58++;
                break;

            case 59:
                n59++;
                break;

            case 60:
                n60++;
                break;
        }

        switch (Integer.parseInt(sorteio2)) {
            case 1:
                n1++;
                break;
            case 2:
                n2++;
                break;

            case 3:
                n3++;
                break;

            case 4:
                n4++;
                break;

            case 5:
                n5++;
                break;

            case 6:
                n6++;
                break;

            case 7:
                n7++;
                break;

            case 8:
                n8++;
                break;

            case 9:
                n9++;
                break;

            case 10:
                n10++;
                break;

            case 11:
                n11++;
                break;

            case 12:
                n12++;
                break;

            case 13:
                n13++;
                break;

            case 14:
                n14++;
                break;

            case 15:
                n15++;
                break;

            case 16:
                n16++;
                break;

            case 17:
                n17++;
                break;

            case 18:
                n18++;
                break;

            case 19:
                n19++;
                break;

            case 20:
                n20++;
                break;

            case 21:
                n21++;
                break;

            case 22:
                n22++;
                break;

            case 23:
                n23++;
                break;

            case 24:
                n24++;
                break;

            case 25:
                n25++;
                break;

            case 26:
                n26++;
                break;

            case 27:
                n27++;
                break;

            case 28:
                n28++;
                break;

            case 29:
                n29++;
                break;

            case 30:
                n30++;
                break;

            case 31:
                n31++;
                break;

            case 32:
                n32++;
                break;

            case 33:
                n33++;
                break;

            case 34:
                n34++;
                break;

            case 35:
                n35++;
                break;

            case 36:
                n36++;
                break;

            case 37:
                n37++;
                break;

            case 38:
                n38++;
                break;

            case 39:
                n39++;
                break;

            case 40:
                n40++;
                break;

            case 41:
                n41++;
                break;

            case 42:
                n42++;
                break;

            case 43:
                n43++;
                break;

            case 44:
                n44++;
                break;

            case 45:
                n45++;
                break;

            case 46:
                n46++;
                break;

            case 47:
                n47++;
                break;

            case 48:
                n48++;
                break;

            case 49:
                n49++;
                break;

            case 50:
                n50++;
                break;

            case 51:
                n51++;
                break;

            case 52:
                n52++;
                break;

            case 53:
                n53++;
                break;

            case 54:
                n54++;
                break;

            case 55:
                n55++;
                break;

            case 56:
                n56++;
                break;

            case 57:
                n57++;
                break;

            case 58:
                n58++;
                break;

            case 59:
                n59++;
                break;

            case 60:
                n60++;
                break;
        }
        
        switch (Integer.parseInt(sorteio3)) {
            case 1:
                n1++;
                break;
            case 2:
                n2++;
                break;

            case 3:
                n3++;
                break;

            case 4:
                n4++;
                break;

            case 5:
                n5++;
                break;

            case 6:
                n6++;
                break;

            case 7:
                n7++;
                break;

            case 8:
                n8++;
                break;

            case 9:
                n9++;
                break;

            case 10:
                n10++;
                break;

            case 11:
                n11++;
                break;

            case 12:
                n12++;
                break;

            case 13:
                n13++;
                break;

            case 14:
                n14++;
                break;

            case 15:
                n15++;
                break;

            case 16:
                n16++;
                break;

            case 17:
                n17++;
                break;

            case 18:
                n18++;
                break;

            case 19:
                n19++;
                break;

            case 20:
                n20++;
                break;

            case 21:
                n21++;
                break;

            case 22:
                n22++;
                break;

            case 23:
                n23++;
                break;

            case 24:
                n24++;
                break;

            case 25:
                n25++;
                break;

            case 26:
                n26++;
                break;

            case 27:
                n27++;
                break;

            case 28:
                n28++;
                break;

            case 29:
                n29++;
                break;

            case 30:
                n30++;
                break;

            case 31:
                n31++;
                break;

            case 32:
                n32++;
                break;

            case 33:
                n33++;
                break;

            case 34:
                n34++;
                break;

            case 35:
                n35++;
                break;

            case 36:
                n36++;
                break;

            case 37:
                n37++;
                break;

            case 38:
                n38++;
                break;

            case 39:
                n39++;
                break;

            case 40:
                n40++;
                break;

            case 41:
                n41++;
                break;

            case 42:
                n42++;
                break;

            case 43:
                n43++;
                break;

            case 44:
                n44++;
                break;

            case 45:
                n45++;
                break;

            case 46:
                n46++;
                break;

            case 47:
                n47++;
                break;

            case 48:
                n48++;
                break;

            case 49:
                n49++;
                break;

            case 50:
                n50++;
                break;

            case 51:
                n51++;
                break;

            case 52:
                n52++;
                break;

            case 53:
                n53++;
                break;

            case 54:
                n54++;
                break;

            case 55:
                n55++;
                break;

            case 56:
                n56++;
                break;

            case 57:
                n57++;
                break;

            case 58:
                n58++;
                break;

            case 59:
                n59++;
                break;

            case 60:
                n60++;
                break;
        }
        
        switch (Integer.parseInt(sorteio4)) {
            case 1:
                n1++;
                break;
            case 2:
                n2++;
                break;

            case 3:
                n3++;
                break;

            case 4:
                n4++;
                break;

            case 5:
                n5++;
                break;

            case 6:
                n6++;
                break;

            case 7:
                n7++;
                break;

            case 8:
                n8++;
                break;

            case 9:
                n9++;
                break;

            case 10:
                n10++;
                break;

            case 11:
                n11++;
                break;

            case 12:
                n12++;
                break;

            case 13:
                n13++;
                break;

            case 14:
                n14++;
                break;

            case 15:
                n15++;
                break;

            case 16:
                n16++;
                break;

            case 17:
                n17++;
                break;

            case 18:
                n18++;
                break;

            case 19:
                n19++;
                break;

            case 20:
                n20++;
                break;

            case 21:
                n21++;
                break;

            case 22:
                n22++;
                break;

            case 23:
                n23++;
                break;

            case 24:
                n24++;
                break;

            case 25:
                n25++;
                break;

            case 26:
                n26++;
                break;

            case 27:
                n27++;
                break;

            case 28:
                n28++;
                break;

            case 29:
                n29++;
                break;

            case 30:
                n30++;
                break;

            case 31:
                n31++;
                break;

            case 32:
                n32++;
                break;

            case 33:
                n33++;
                break;

            case 34:
                n34++;
                break;

            case 35:
                n35++;
                break;

            case 36:
                n36++;
                break;

            case 37:
                n37++;
                break;

            case 38:
                n38++;
                break;

            case 39:
                n39++;
                break;

            case 40:
                n40++;
                break;

            case 41:
                n41++;
                break;

            case 42:
                n42++;
                break;

            case 43:
                n43++;
                break;

            case 44:
                n44++;
                break;

            case 45:
                n45++;
                break;

            case 46:
                n46++;
                break;

            case 47:
                n47++;
                break;

            case 48:
                n48++;
                break;

            case 49:
                n49++;
                break;

            case 50:
                n50++;
                break;

            case 51:
                n51++;
                break;

            case 52:
                n52++;
                break;

            case 53:
                n53++;
                break;

            case 54:
                n54++;
                break;

            case 55:
                n55++;
                break;

            case 56:
                n56++;
                break;

            case 57:
                n57++;
                break;

            case 58:
                n58++;
                break;

            case 59:
                n59++;
                break;

            case 60:
                n60++;
                break;
        }
        
        switch (Integer.parseInt(sorteio5)) {
            case 1:
                n1++;
                break;
            case 2:
                n2++;
                break;

            case 3:
                n3++;
                break;

            case 4:
                n4++;
                break;

            case 5:
                n5++;
                break;

            case 6:
                n6++;
                break;

            case 7:
                n7++;
                break;

            case 8:
                n8++;
                break;

            case 9:
                n9++;
                break;

            case 10:
                n10++;
                break;

            case 11:
                n11++;
                break;

            case 12:
                n12++;
                break;

            case 13:
                n13++;
                break;

            case 14:
                n14++;
                break;

            case 15:
                n15++;
                break;

            case 16:
                n16++;
                break;

            case 17:
                n17++;
                break;

            case 18:
                n18++;
                break;

            case 19:
                n19++;
                break;

            case 20:
                n20++;
                break;

            case 21:
                n21++;
                break;

            case 22:
                n22++;
                break;

            case 23:
                n23++;
                break;

            case 24:
                n24++;
                break;

            case 25:
                n25++;
                break;

            case 26:
                n26++;
                break;

            case 27:
                n27++;
                break;

            case 28:
                n28++;
                break;

            case 29:
                n29++;
                break;

            case 30:
                n30++;
                break;

            case 31:
                n31++;
                break;

            case 32:
                n32++;
                break;

            case 33:
                n33++;
                break;

            case 34:
                n34++;
                break;

            case 35:
                n35++;
                break;

            case 36:
                n36++;
                break;

            case 37:
                n37++;
                break;

            case 38:
                n38++;
                break;

            case 39:
                n39++;
                break;

            case 40:
                n40++;
                break;

            case 41:
                n41++;
                break;

            case 42:
                n42++;
                break;

            case 43:
                n43++;
                break;

            case 44:
                n44++;
                break;

            case 45:
                n45++;
                break;

            case 46:
                n46++;
                break;

            case 47:
                n47++;
                break;

            case 48:
                n48++;
                break;

            case 49:
                n49++;
                break;

            case 50:
                n50++;
                break;

            case 51:
                n51++;
                break;

            case 52:
                n52++;
                break;

            case 53:
                n53++;
                break;

            case 54:
                n54++;
                break;

            case 55:
                n55++;
                break;

            case 56:
                n56++;
                break;

            case 57:
                n57++;
                break;

            case 58:
                n58++;
                break;

            case 59:
                n59++;
                break;

            case 60:
                n60++;
                break;
        }
        
        switch (Integer.parseInt(sorteio6)) {
            case 1:
                n1++;
                break;
            case 2:
                n2++;
                break;

            case 3:
                n3++;
                break;

            case 4:
                n4++;
                break;

            case 5:
                n5++;
                break;

            case 6:
                n6++;
                break;

            case 7:
                n7++;
                break;

            case 8:
                n8++;
                break;

            case 9:
                n9++;
                break;

            case 10:
                n10++;
                break;

            case 11:
                n11++;
                break;

            case 12:
                n12++;
                break;

            case 13:
                n13++;
                break;

            case 14:
                n14++;
                break;

            case 15:
                n15++;
                break;

            case 16:
                n16++;
                break;

            case 17:
                n17++;
                break;

            case 18:
                n18++;
                break;

            case 19:
                n19++;
                break;

            case 20:
                n20++;
                break;

            case 21:
                n21++;
                break;

            case 22:
                n22++;
                break;

            case 23:
                n23++;
                break;

            case 24:
                n24++;
                break;

            case 25:
                n25++;
                break;

            case 26:
                n26++;
                break;

            case 27:
                n27++;
                break;

            case 28:
                n28++;
                break;

            case 29:
                n29++;
                break;

            case 30:
                n30++;
                break;

            case 31:
                n31++;
                break;

            case 32:
                n32++;
                break;

            case 33:
                n33++;
                break;

            case 34:
                n34++;
                break;

            case 35:
                n35++;
                break;

            case 36:
                n36++;
                break;

            case 37:
                n37++;
                break;

            case 38:
                n38++;
                break;

            case 39:
                n39++;
                break;

            case 40:
                n40++;
                break;

            case 41:
                n41++;
                break;

            case 42:
                n42++;
                break;

            case 43:
                n43++;
                break;

            case 44:
                n44++;
                break;

            case 45:
                n45++;
                break;

            case 46:
                n46++;
                break;

            case 47:
                n47++;
                break;

            case 48:
                n48++;
                break;

            case 49:
                n49++;
                break;

            case 50:
                n50++;
                break;

            case 51:
                n51++;
                break;

            case 52:
                n52++;
                break;

            case 53:
                n53++;
                break;

            case 54:
                n54++;
                break;

            case 55:
                n55++;
                break;

            case 56:
                n56++;
                break;

            case 57:
                n57++;
                break;

            case 58:
                n58++;
                break;

            case 59:
                n59++;
                break;

            case 60:
                n60++;
                break;
        }
                    }
                bf.close();
                fr.close();
                for(int i = 0;i < 60;i++){
                    switch(i){
                        case 0:
                            vetor60[i] = n1;
                            break;
                        
                        case 1:
                            vetor60[i] = n2;
                            break;
                         
                        case 2:
                            vetor60[i] = n3;
                            break;
                            
                            case 3:
                            vetor60[i] = n4;
                            break;
                            
                            case 4:
                            vetor60[i] = n5;
                            break;
                            
                            case 5:
                            vetor60[i] = n6;
                            break;
                            
                            case 6:
                            vetor60[i] = n7;
                            break;
                            
                            case 7:
                            vetor60[i] = n8;
                            break;
                                                        
                            case 8:
                            vetor60[i] = n9;
                            break;
                            
                            case 9:
                            vetor60[i] = n10;
                            break;
                            
                            case 10:
                            vetor60[i] = n11;
                            break;
                            
                            case 11:
                            vetor60[i] = n12;
                            break;
                        
                        case 12:
                            vetor60[i] = n13;
                            break;
                         
                        case 13:
                            vetor60[i] = n14;
                            break;
                            
                            case 14:
                            vetor60[i] = n15;
                            break;
                            
                            case 15:
                            vetor60[i] = n16;
                            break;
                            
                            case 16:
                            vetor60[i] = n17;
                            break;
                            
                            case 17:
                            vetor60[i] = n18;
                            break;
                            
                            case 18:
                            vetor60[i] = n19;
                            break;
                            
                            case 19:
                            vetor60[i] = n20;
                            break;
                            
                            case 20:
                            vetor60[i] = n21;
                            break;
                            
                            case 21:
                            vetor60[i] = n22;
                            break;
                        
                        case 22:
                            vetor60[i] = n23;
                            break;
                         
                        case 23:
                            vetor60[i] = n24;
                            break;
                            
                            case 24:
                            vetor60[i] = n25;
                            break;
                            
                            case 25:
                            vetor60[i] = n26;
                            break;
                            
                            case 26:
                            vetor60[i] = n27;
                            break;
                            
                            case 27:
                            vetor60[i] = n28;
                            break;
                            
                            case 28:
                            vetor60[i] = n29;
                            break;
                            
                            case 29:
                            vetor60[i] = n30;
                            break;
                                                            
                            case 30:
                            vetor60[i] = n31;
                            break;
                            
                            case 31:
                            vetor60[i] = n32;
                            break;
                            
                            case 32:
                            vetor60[i] = n33;
                            break;
                        
                        case 33:
                            vetor60[i] = n34;
                            break;
                         
                        case 34:
                            vetor60[i] = n35;
                            break;
                            
                            case 35:
                            vetor60[i] = n36;
                            break;
                            
                            case 36:
                            vetor60[i] = n37;
                            break;
                            
                            case 37:
                            vetor60[i] = n38;
                            break;
                            
                            case 38:
                            vetor60[i] = n39;
                            break;
                            
                            case 39:
                            vetor60[i] = n40;
                            break;
                            
                            case 40:
                            vetor60[i] = n41;
                            break;
                            
                            case 41:
                            vetor60[i] = n42;
                            break;
                            
                            case 42:
                            vetor60[i] = n43;
                            break;
                        
                        case 43:
                            vetor60[i] = n44;
                            break;
                         
                        case 44:
                            vetor60[i] = n45;
                            break;
                            
                            case 45:
                            vetor60[i] = n46;
                            break;
                            
                            case 46:
                            vetor60[i] = n47;
                            break;
                            
                            case 47:
                            vetor60[i] = n48;
                            break;
                            
                            case 48:
                            vetor60[i] = n49;
                            break;
                            
                            case 49:
                            vetor60[i] = n50;
                            break;
                            
                            case 50:
                            vetor60[i] = n51;
                            break;
                            
                            case 51:
                            vetor60[i] = n52;
                            break;
                            
                            case 52:
                            vetor60[i] = n53;
                            break;
                        
                        case 53:
                            vetor60[i] = n54;
                            break;
                         
                        case 54:
                            vetor60[i] = n55;
                            break;
                            
                            case 55:
                            vetor60[i] = n56;
                            break;
                            
                            case 56:
                            vetor60[i] = n57;
                            break;
                            
                            case 57:
                            vetor60[i] = n58;
                            break;
                            
                            case 58:
                            vetor60[i] = n59;
                            break;
                            
                            case 59:
                            vetor60[i] = n60;
                            break;
                    }
                }
                
                for(int i = 0;i < 60;i++){
                    for(int j = i+1;j < 60;j++){
                    if(vetor60[i] < vetor60[j]){
                       recebevalor = vetor60[i];
                       vetor60[i] = vetor60[j];
                       vetor60[j] = recebevalor;
                    }
                    }
                }
                
                 for(int i = 0;i < 60;i++){
                     
                     if(n1 == vetor60[i]){
                         vetor60[i] = 1;
                         n1 = 0;
                     }else if(n2 == vetor60[i]){
                         vetor60[i] = 2;
                         n2 = 0;
                     }else if(n3 == vetor60[i]){
                         vetor60[i] = 3;
                         n3 = 0;
                     }else if(n4 == vetor60[i]){
                         vetor60[i] = 4;
                         n4 = 0;
                     }else if(n5 == vetor60[i]){
                         vetor60[i] = 5;
                         n5 = 0;
                     }else if(n6 == vetor60[i]){
                         vetor60[i] = 6;
                         n6 = 0;
                     }else if(n7 == vetor60[i]){
                         vetor60[i] = 7;
                         n7 = 0;
                     }else if(n8 == vetor60[i]){
                         vetor60[i] = 8;
                         n8 = 0;
                     }else if(n9 == vetor60[i]){
                         vetor60[i] = 9;
                         n9 = 0;
                     }else if(n10 == vetor60[i]){
                         vetor60[i] = 10;
                         n10 = 0;
                     }else if(n11 == vetor60[i]){
                         vetor60[i] = 11;
                         n11 = 0;
                     }else if(n12 == vetor60[i]){
                         vetor60[i] = 12;
                         n12 = 0;
                     }else if(n13 == vetor60[i]){
                         vetor60[i] = 13;
                         n13 = 0;
                     }else if(n14 == vetor60[i]){
                         vetor60[i] = 14;
                         n14 = 0;
                     }else if(n15 == vetor60[i]){
                         vetor60[i] = 15;
                         n15 = 0;
                     }else if(n16 == vetor60[i]){
                         vetor60[i] = 16;
                         n16 = 0;
                     }else if(n17 == vetor60[i]){
                         vetor60[i] = 17;
                         n17 = 0;
                     }else if(n18 == vetor60[i]){
                         vetor60[i] = 18;
                         n18 = 0;
                     }else if(n19 == vetor60[i]){
                         vetor60[i] = 19;
                         n19 = 0;
                     }else if(n20 == vetor60[i]){
                         vetor60[i] = 20;
                         n20 = 0;
                     }else if(n21 == vetor60[i]){
                         vetor60[i] = 21;
                         n21 = 0;
                     }else if(n22 == vetor60[i]){
                         vetor60[i] = 22;
                         n22 = 0;
                     }else if(n23 == vetor60[i]){
                         vetor60[i] = 23;
                         n23 = 0;
                     }else if(n24 == vetor60[i]){
                         vetor60[i] = 24;
                         n24 = 0;
                     }else if(n25 == vetor60[i]){
                         vetor60[i] = 25;
                         n25 = 0;
                     }else if(n26 == vetor60[i]){
                         vetor60[i] = 26;
                         n26 = 0;
                     }else if(n27 == vetor60[i]){
                         vetor60[i] = 27;
                         n27 = 0;
                     }else if(n28 == vetor60[i]){
                         vetor60[i] = 28;
                         n28 = 0;
                     }else if(n29 == vetor60[i]){
                         vetor60[i] = 29;
                         n29 = 0;
                     }else if(n30 == vetor60[i]){
                         vetor60[i] = 30;
                         n30 = 0;
                     }else if(n31 == vetor60[i]){
                         vetor60[i] = 31;
                         n31 = 0;
                     }else if(n32 == vetor60[i]){
                         vetor60[i] = 32;
                         n32 = 0;
                     }else if(n33 == vetor60[i]){
                         vetor60[i] = 33;
                         n33 = 0;
                     }else if(n34 == vetor60[i]){
                         vetor60[i] = 34;
                         n34 = 0;
                     }else if(n35 == vetor60[i]){
                         vetor60[i] = 35;
                         n35 = 0;
                     }else if(n36 == vetor60[i]){
                         vetor60[i] = 36;
                         n36 = 0;
                     }else if(n37 == vetor60[i]){
                         vetor60[i] = 37;
                         n37 = 0;
                     }else if(n38 == vetor60[i]){
                         vetor60[i] = 38;
                         n38 = 0;
                     }else if(n39 == vetor60[i]){
                         vetor60[i] = 39;
                         n39 = 0;
                     }else if(n40 == vetor60[i]){
                         vetor60[i] = 40;
                         n40 = 0;
                     }else if(n41 == vetor60[i]){
                         vetor60[i] = 41;
                         n41 = 0;
                     }else if(n42 == vetor60[i]){
                         vetor60[i] = 42;
                         n42 = 0;
                     }else if(n43 == vetor60[i]){
                         vetor60[i] = 43;
                         n43 = 0;
                     }else if(n44 == vetor60[i]){
                         vetor60[i] = 44;
                         n44 = 0;
                     }else if(n45 == vetor60[i]){
                         vetor60[i] = 45;
                         n45 = 0;
                     }else if(n46 == vetor60[i]){
                         vetor60[i] = 46;
                         n46 = 0;
                     }else if(n47 == vetor60[i]){
                         vetor60[i] = 47;
                         n47 = 0;
                     }else if(n48 == vetor60[i]){
                         vetor60[i] = 48;
                         n48 = 0;
                     }else if(n49 == vetor60[i]){
                         vetor60[i] = 49;
                         n49 = 0;
                     }else if(n50 == vetor60[i]){
                         vetor60[i] = 50;
                         n50 = 0;
                     }else if(n51 == vetor60[i]){
                         vetor60[i] = 51;
                         n51 = 0;
                     }else if(n52 == vetor60[i]){
                         vetor60[i] = 52;
                         n52 = 0;
                     }else if(n53 == vetor60[i]){
                         vetor60[i] = 53;
                         n53 = 0;
                     }else if(n54 == vetor60[i]){
                         vetor60[i] = 54;
                         n54 = 0;
                     }else if(n55 == vetor60[i]){
                         vetor60[i] = 55;
                         n55 = 0;
                     }else if(n56 == vetor60[i]){
                         vetor60[i] = 56;
                         n56 = 0;
                     }else if(n57 == vetor60[i]){
                         vetor60[i] = 57;
                         n57 = 0;
                     }else if(n58 == vetor60[i]){
                         vetor60[i] = 58;
                         n58 = 0;
                     }else if(n59 == vetor60[i]){
                         vetor60[i] = 59;
                         n59 = 0;
                     }else if(n60 == vetor60[i]){
                         vetor60[i] = 60;
                         n60 = 0;
                     }
                }
            JOptionPane.showMessageDialog(null,"Arquivo extraído com sucesso!");
            Mostrarccombinacoes.setEnabled(true);
            Vernumeros.setEnabled(true);
            }
            
            
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void VernumerosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VernumerosActionPerformed
        Texto1.setText("");
        for(int i = 0;i < 60;i++){
            conversor = String.valueOf(vetor60[i]);
            Texto1.insert(conversor,Texto1.getCaretPosition());
            Texto1.append(" - ");
        }
    }//GEN-LAST:event_VernumerosActionPerformed

    private void MostrarccombinacoesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MostrarccombinacoesActionPerformed
        Texto1.setText("");
        for(int a = 0;a < 30;a++){
                    for(int b = a+1;b < 30;b++){
                        for(int c = b+1;c < 30;c++){
                            for(int d = c+1;d < 30;d++){
                                for(int e = d+1;e < 30;e++){
                                    for(int f = e+1;f < 30;f++){
                                        contadorvalores ++;
                                        Texto1.insert(vetor60[a] + " " +vetor60[b] + " " +vetor60[c] + " " +vetor60[d] + " " +vetor60[e] + " " +vetor60[f],Texto1.getCaretPosition());
                                        Texto1.append("\n");
                                    }
                                }
                            }
                        }
                    }
                }
        JOptionPane.showMessageDialog(null,"Foram " + contadorvalores + " combinações encontradas nos 30 números que mais saíram.");
    }//GEN-LAST:event_MostrarccombinacoesActionPerformed

    private void VerificarJogoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VerificarJogoActionPerformed
        
    }//GEN-LAST:event_VerificarJogoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProcurarArquivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProcurarArquivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProcurarArquivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProcurarArquivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProcurarArquivo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Mostrarccombinacoes;
    private javax.swing.JTextArea Texto1;
    private javax.swing.JButton VerificarJogo;
    private javax.swing.JButton Vernumeros;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
